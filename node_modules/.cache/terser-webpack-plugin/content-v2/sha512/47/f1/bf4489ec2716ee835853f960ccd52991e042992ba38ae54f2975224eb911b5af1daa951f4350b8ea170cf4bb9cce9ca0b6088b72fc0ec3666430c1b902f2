{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{595:function(v,_,l){\"use strict\";l.r(_);var t=l(0),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[l(\"h3\",{attrs:{id:\"单体架构及其存在的不足\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#单体架构及其存在的不足\"}},[v._v(\"#\")]),v._v(\" 单体架构及其存在的不足\")]),v._v(\" \"),l(\"p\",[l(\"strong\",[v._v(\"单体架构存在的不足\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"业务越来越复杂，代码量增多，可读性、可维护性和可扩展性下降\")]),v._v(\" \"),l(\"li\",[v._v(\"用户量增多，并发升高，单体应用并发能力有限\")]),v._v(\" \"),l(\"li\",[v._v(\"所有业务都在一个程序里，测试难度增大\")])]),v._v(\" \"),l(\"p\",[l(\"strong\",[v._v(\"单体架构使用服务器集群及存在的不足\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"系统仍为单体应用，代码量仍旧巨大\")]),v._v(\" \"),l(\"li\",[v._v(\"面对海量的用户，数据库成为瓶颈\")]),v._v(\" \"),l(\"li\",[v._v(\"持续交付能力差，业务越复杂，代码越多\")])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"微服务\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微服务\"}},[v._v(\"#\")]),v._v(\" 微服务\")]),v._v(\" \"),l(\"p\",[v._v(\"简而言之，微服务架构的风格，就是将单一程序开发成一个微服务，每个微服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP RESTFUL API，这些服务围绕业务能力来划分构建的，并通过完全自动化部署机制来独立部署。这些服务可以使用不同的编程语言，以及不同数据存储技术，以保证最低限度的集中式管理\")]),v._v(\" \"),l(\"p\",[v._v(\"总的来说，微服务具备如下特点\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"按照业务来划分服务，单个服务代码量小，业务单一，易于维护\")]),v._v(\" \"),l(\"li\",[v._v(\"每个微服务都有自 己独立的基础组件，例如数据库、 缓存等，且运行在独立的进程中\")]),v._v(\" \"),l(\"li\",[v._v(\"微服务之间的通信是通过 HTTP 协议或者消息组件，且具有容错能力\")]),v._v(\" \"),l(\"li\",[v._v(\"微服务有一套服务治理的解决方案，服务之间不相合，可以随时加入和剔除服务\")]),v._v(\" \"),l(\"li\",[v._v(\"单个微服务能够集群化部署，并且有负载均衡的能力\")]),v._v(\" \"),l(\"li\",[v._v(\"整个微服务系统应该有一个完整的安全机制，包括用户验证、权限验证、资源保护等\")]),v._v(\" \"),l(\"li\",[v._v(\"整个微服务系统有链路追踪的能力\")]),v._v(\" \"),l(\"li\",[v._v(\"有一套完整的实时日志系统\")])]),v._v(\" \"),l(\"p\",[l(\"strong\",[v._v(\"微服务的优势\")])]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"将一个复杂的业务分解成若干小业务，每个业务拆分成一个服务，将复杂的问题简单化\")]),v._v(\" \"),l(\"li\",[v._v(\"微服务系统是分布式系统，服务与服务之间没有任何的耦合，具有很强的横向拓展能力\")]),v._v(\" \"),l(\"li\",[v._v(\"服务与服务之间通过HTTP网络通信协议来进行通信，各服务可自由选择自己的开发语言和技术\")]),v._v(\" \"),l(\"li\",[v._v(\"便于重写业务\")]),v._v(\" \"),l(\"li\",[v._v(\"服务单元之间相互隔离，便于部署和测试\")]),v._v(\" \"),l(\"li\",[v._v(\"微服务在CAP理论中采用的是AP架构，具有高可用和分区容错的特点\")])]),v._v(\" \"),l(\"h3\",{attrs:{id:\"微服务的不足\"}},[l(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#微服务的不足\"}},[v._v(\"#\")]),v._v(\" 微服务的不足\")]),v._v(\" \"),l(\"p\",[v._v(\"微服务的不足主要体现在以下方面：\")]),v._v(\" \"),l(\"ul\",[l(\"li\",[v._v(\"微服务的复杂度\")]),v._v(\" \"),l(\"li\",[v._v(\"分布式事务\")]),v._v(\" \"),l(\"li\",[v._v(\"服务的划分\")]),v._v(\" \"),l(\"li\",[v._v(\"服务的部署\")])])])}),[],!1,null,null,null);_.default=i.exports}}]);","extractedComments":[]}