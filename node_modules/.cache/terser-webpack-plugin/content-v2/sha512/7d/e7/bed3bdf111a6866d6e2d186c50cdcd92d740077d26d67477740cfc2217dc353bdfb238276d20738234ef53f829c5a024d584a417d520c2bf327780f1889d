{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{503:function(e,n,t){e.exports=t.p+\"assets/img/201911121651.37a29905.png\"},716:function(e,n,t){\"use strict\";t.r(n);var i=t(0),s=Object(i.a)({},(function(){var e=this,n=e.$createElement,i=e._self._c||n;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[i(\"h3\",{attrs:{id:\"feignclient详解\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#feignclient详解\"}},[e._v(\"#\")]),e._v(\" FeignClient详解\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:t(503),alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"FeignClient注解被@Target(ElementType.TYPE)修饰，表示FeignClient注解的作用目标在接口上。@Retention(RetentionPolicy.RUNTIME)注解表明该注解会在Class字节码文件中存在，在运行时可以通过反射获取到。@Documented表示该注解将被包含在Javadoc中\")]),e._v(\" \"),i(\"p\",[e._v(\"@FeignClient注解用于创建声明式API接口，该接口是RESTful风格的。Feign被设计成插拔式的，可以注入其它组件与Feign一起使用。最典型的是如果Ribbon可用，Feign会和Ribbon结合实现负载均衡\")]),e._v(\" \"),i(\"p\",[e._v(\"在代码中，value()和name()一样，是被调用的服务的serviceId。url()直接写硬编码的Url地址。decode()404即404是被解码，还是抛异常。configuration()指明FeignClient的配置类，默认的是FeignClientsConfiguration类，在缺省情况下，这个类注入了默认的Decoder、Encoder和Contract等配置的bean。fallback()为配置熔断器的处理类\")]),e._v(\" \"),i(\"h3\",{attrs:{id:\"feign常用配置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#feign常用配置\"}},[e._v(\"#\")]),e._v(\" Feign常用配置\")]),e._v(\" \"),i(\"p\",[i(\"strong\",[e._v(\"Ribbon配置\")]),i(\"br\"),e._v(\"\\n在Feign中配置Ribbon非常简单，直接在配置文件中添加配置即可：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- line-numbers-mode\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"ribbon.ConnectTimeout=500 # 设置连接超时时间\\nribbon.ReadTimeout=5000 # 设置读取超时时间\\nribbon.OkToRetryOnAllOperations=true # 对所有请求都进行重试\\nribbon.MaxAutoRetriesNextServer=2 # 切换实例的重试次数\\nribbon.MaxAutoRetries=1 # 对当前实例的重试次数\\n\")])]),e._v(\" \"),i(\"div\",{staticClass:\"line-numbers-wrapper\"},[i(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),i(\"br\")])]),i(\"p\",[e._v(\"也可以指定某个服务的配置，比如：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- line-numbers-mode\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"user-service.ribbon.ConnectTimeout=600 # 设置user-service服务的连接超时时间\\n\")])]),e._v(\" \"),i(\"div\",{staticClass:\"line-numbers-wrapper\"},[i(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),i(\"br\")])]),i(\"p\",[i(\"strong\",[e._v(\"请求压缩\")]),i(\"br\"),e._v(\"\\nSpring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- line-numbers-mode\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"feign.compression.request.enabled=true # 配置请求GZIP压缩\\nfeign.compression.response.enabled=true # 配置响应GZIP压缩\\n# 配置压缩支持的MIME TYPE\\nfeign.compression.request.mime-types=text/xml,application/xml,application/json \\nfeign.compression.request.min-request-size=2048 # 配置压缩数据的下限\\n\")])]),e._v(\" \"),i(\"div\",{staticClass:\"line-numbers-wrapper\"},[i(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"2\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"3\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"4\")]),i(\"br\"),i(\"span\",{staticClass:\"line-number\"},[e._v(\"5\")]),i(\"br\")])]),i(\"p\",[i(\"strong\",[e._v(\"日志配置\")]),i(\"br\"),e._v(\"\\nSpring Cloud Feign为每个Feign Client都提供了一个Logger实例\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- line-numbers-mode\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"logging.level. com.eureka.feign.service.UserService: debug \\n\")])]),e._v(\" \"),i(\"div\",{staticClass:\"line-numbers-wrapper\"},[i(\"span\",{staticClass:\"line-number\"},[e._v(\"1\")]),i(\"br\")])]),i(\"p\",[e._v(\"然后在启动类中添加Logger实例\")]),e._v(\" \"),i(\"h3\",{attrs:{id:\"在feign中使用httpclient和okhttp\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在feign中使用httpclient和okhttp\"}},[e._v(\"#\")]),e._v(\" 在Feign中使用HttpClient和OkHttp\")]),e._v(\" \"),i(\"p\",[e._v(\"在Feign中，Client是一个非常重要的组件，Feign最终发送Request请求以及接收Response响应都是由Client组件完成的。Client在Feign源码中是一个接口，在默认的情况下，Client的实现类是Client.Default，Client.Default是由HttpUrlConnection来实现网络请求的。另外，Client还支持HttpClient和OkHttp来进行网络请求。只需在项目中导入相应的jar包即可\")]),e._v(\" \"),i(\"h3\",{attrs:{id:\"总结\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[e._v(\"#\")]),e._v(\" 总结\")]),e._v(\" \"),i(\"p\",[e._v(\"总的来说，Feign源码实现过程如下：\")]),e._v(\" \"),i(\"ol\",[i(\"li\",[e._v(\"首先通过@EnableFeignClients注解开启FeignClient的功能，只有这个注解存在，才会在程序启动时开启对@FeignClient注解的包扫描\")]),e._v(\" \"),i(\"li\",[e._v(\"根据Feign规则实现接口，并在接口上添加@FeignClient注解\")]),e._v(\" \"),i(\"li\",[e._v(\"程序启动后，会进行包扫描，扫描所有的@FeignClient注解的类，并将这些信息注入到IOC容器中\")]),e._v(\" \"),i(\"li\",[e._v(\"当接口的方法被调用时，通过JDK的代理来生成具体的RequestTemplate模板对象\")]),e._v(\" \"),i(\"li\",[e._v(\"根据RequestTemplate再生成Http请求的Request对象\")]),e._v(\" \"),i(\"li\",[e._v(\"Request对象交给Client去处理，其中Client的网络请求框架可以是HttpUrlConnection、HttpClient和OkHttp\")]),e._v(\" \"),i(\"li\",[e._v(\"最后Client被封装到LoadBalanceClient类，这个类结合类Ribbon做到了负载均衡\")])])])}),[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}