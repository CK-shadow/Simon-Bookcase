{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{483:function(t,a,i){t.exports=i.p+\"assets/img/b2842a80.c20458f0.png\"},484:function(t,a,i){t.exports=i.p+\"assets/img/05d2ac17.0b958364.png\"},628:function(t,a,i){\"use strict\";i.r(a);var n=i(0),o=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h3\",{attrs:{id:\"常用api说明\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用api说明\"}},[t._v(\"#\")]),t._v(\" 常用API说明\")]),t._v(\" \"),n(\"p\",[t._v(\"SpringApplication类:用于启动SpringBoot的程序，根据传入的类声明的注解来决定不同的启动方式\\n\"),n(\"img\",{attrs:{src:i(483),alt:\"\"}})]),t._v(\" \"),n(\"h3\",{attrs:{id:\"enableautoconfiguration注解\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#enableautoconfiguration注解\"}},[t._v(\"#\")]),t._v(\" @EnableAutoConfiguration注解\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"作用\\n\"),n(\"ul\",[n(\"li\",[t._v(\"启动程序时，告诉SpringBoot启动对象使用SpringBoot的默认配置，只要在SpringBoot项目的入口类配置了@EnableAutoConfiguration，框架启动时就会根据导入的jar包来加载配置类，使用其默认配置\")])])]),t._v(\" \"),n(\"li\",[t._v(\"属性\\n\"),n(\"ul\",[n(\"li\",[t._v(\"exclude：使用class格式的方式，排除默认自启动中不需要的配置类\")]),t._v(\" \"),n(\"li\",[t._v(\"excludeName：使用类的限制名的方式，排除默认自动启动中不需要的配置类\")])])])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"springbootapplication注解\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#springbootapplication注解\"}},[t._v(\"#\")]),t._v(\" @SpringBootApplication注解\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:i(484),alt:\"\"}})]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"根据标红注解的声明，可以得出@SpringBootApplication注解包含三个功能：\\n\"),n(\"ul\",[n(\"li\",[t._v(\"@SpringBootConfiguration    加入了SpringBootApplication注解的类是一个配置类\")]),t._v(\" \"),n(\"li\",[t._v(\"@EnableAutoConfiguration    具备EnableAutoConfiguration注解启动SpringBootApplication默认配置类的功能\")]),t._v(\" \"),n(\"li\",[t._v(\"@ComponentScan    支持扫描当前类同包及子包的组件类创建bean在spring容器中\")])])]),t._v(\" \"),n(\"li\",[t._v(\"属性说明\\n\"),n(\"ul\",[n(\"li\",[t._v(\"basePackages：@SpringBootApplication注解默认扫描的是当前类的包及子包，如果要其他范围的包，可使用basepackages指定\")]),t._v(\" \"),n(\"li\",[t._v(\"basePackagesClass：用于精确指定哪些类需要创建对象到spring容器中\")]),t._v(\" \"),n(\"li\",[t._v(\"exclude：使用class的方式排除不扫描的类\")]),t._v(\" \"),n(\"li\",[t._v(\"excludeName：通过类的全限定名的方式，排除不扫描的类\")])])])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"configurationbefore注解\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#configurationbefore注解\"}},[t._v(\"#\")]),t._v(\" @ConfigurationBefore注解\")]),t._v(\" \"),n(\"p\",[t._v(\"指定在SpringBoot框架自动配置的配置类执行完成之前，执行指定的自定义配置类，如果放在Application入口类，表示在所有自动配置的配置类还没有加载就可以先加载自己的配置类\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"属性\\n\"),n(\"ul\",[n(\"li\",[t._v(\"value：使用类的方式指定自动配置类\")]),t._v(\" \"),n(\"li\",[t._v(\"name：使用类的全限定名（字符串）指定自动配置类\")])])])])])}),[],!1,null,null,null);a.default=o.exports}}]);","extractedComments":[]}