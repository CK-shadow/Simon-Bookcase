{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{745:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h3\",{attrs:{id:\"为什么需要spring-cloud-sleuth\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么需要spring-cloud-sleuth\"}},[e._v(\"#\")]),e._v(\" 为什么需要Spring Cloud Sleuth\")]),e._v(\" \"),n(\"p\",[e._v(\"微服务架构是一个分布式架构，微服务系统按业务划分服务单元，一个微服务系统往往有很多个服务单元。由于服务单元数量众多，业务的复杂性较高，如果出现了错误和异常，很难去定位。主要体现在一个请求可能需要调用很多个服务，而内部服务的调用复杂性决定了难以定位。所以在微服务架构中，必须实现分布式链路追踪，去跟进一个请求到底有哪些服务参与，参与的顺序又是怎样，从而达到每个请求的步骤清晰可见，出了问题能够快速定位的目的\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"基本术语\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本术语\"}},[e._v(\"#\")]),e._v(\" 基本术语\")]),e._v(\" \"),n(\"p\",[e._v(\"Spring Cloud Sleuth采用了Google的开源项目Dapper的专业术语\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[e._v(\"Span：基本工作单元，发送一个远程调度任务就会产生一个Span，Span是用一个64位ID唯一标识的，Trace是用另一个64位ID唯一标识的。Span还包含了其它的信息，例如摘要、时间戳事件、Span的ID以及进程ID\")]),e._v(\" \"),n(\"li\",[e._v(\"Trace：由一系列Span组成，呈树状结构。请求一个微服务系统的API接口，这个API接口需要调用多个微服务单元，调用每个微服务单元都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace\")]),e._v(\" \"),n(\"li\",[e._v(\"Annotation：用于记录一个事件，一些核心注解用于定义一个请求的开始和结束，这些注解如下：\\n\"),n(\"ul\",[n(\"li\",[e._v(\"cs-Client Sent：客户端发送一个请求，这个注解描述了Span的开始\")]),e._v(\" \"),n(\"li\",[e._v(\"sr-Server Received：服务端获得请求并准备开始处理它，如果将其sr减去cs时间戳，便可得到网络传输的时间\")]),e._v(\" \"),n(\"li\",[e._v(\"ss-Server Sent：服务端发送响应，该注解表明请求处理的完成（当请求返回客户端），用ss的时间减去sr的时间戳，便可得到服务器请求的时间\")]),e._v(\" \"),n(\"li\",[e._v(\"cr-Client Received：客户端接收响应，此时Span结束，如果sr的时间戳减去cs时间戳，便可得到整个请求所消耗的时间\")])])])]),e._v(\" \"),n(\"p\",[e._v(\"Spring Cloud Sleuth还可根据系统需求自定义展示数据，通过数据库、MQ、ES等将数据持久化存储，还可以使用Kibana展示数据，这些可根据项目需求自我配置\")])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}