{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{688:function(t,s,n){\"use strict\";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h3\",{attrs:{id:\"线程编程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程编程\"}},[t._v(\"#\")]),t._v(\" 线程编程\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"线程\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"线程被称为轻量级的进程\")]),t._v(\" \"),n(\"li\",[t._v(\"线程也是多任务编程方法\")]),t._v(\" \"),n(\"li\",[t._v(\"线程是系统分配内核的最小单元\")]),t._v(\" \"),n(\"li\",[t._v(\"线程可以理解为进程中的任务分支程序\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"线程特征\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"一个进程可以包含多个线程\")]),t._v(\" \"),n(\"li\",[t._v(\"线程也是一个运算过程，消耗计算机资源\")]),t._v(\" \"),n(\"li\",[t._v(\"一个进程中的所有线程共享这个进程资源\")]),t._v(\" \"),n(\"li\",[t._v(\"多个线程运行互不影响，各自执行\")]),t._v(\" \"),n(\"li\",[t._v(\"线程的创建和销毁消耗资源远小于进程\")]),t._v(\" \"),n(\"li\",[t._v(\"线程也有自己的特有属性特征命令集，id等\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"threading模块创建线程\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-python line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[n(\"code\",[t._v(\"创建线程对象\\n    t \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Thread\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    功能：创建线程对象\\n    参数：target 绑定的线程函数\\n          arges元组 给线程函数位置传参\\n          kwargs 字典 给线程函数关键字字典传参\\n        \\n启动线程\\n    t\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"start\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n        \\n阻塞等待回收线程\\n    t\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"join\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"timeout\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),n(\"br\")])]),n(\"p\",[n(\"strong\",[t._v(\"线程对象属性\")]),n(\"br\"),t._v(\"\\nt.name 线程名称\"),n(\"br\"),t._v(\"\\nt.setName() 设置线程名称\"),n(\"br\"),t._v(\"\\nt.getName() 获取线程名称\"),n(\"br\"),t._v(\"\\nt.is_alive() 查看线程是否在生命周期\"),n(\"br\"),t._v(\"\\nt.daemon() 设置主线程和分支线程的退出关系\"),n(\"br\"),t._v(\"\\nt.setDaemon() 设置daemon属性值\"),n(\"br\"),t._v(\"\\nt.isDaemon() 查看daemon属性值\")]),t._v(\" \"),n(\"div\",{staticClass:\"custom-block tip\"},[n(\"p\",[t._v(\"设置daemon属性值为True时，此时主线程退出分支线程也会退出，设置在start之前，不可与join同用\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"自定义线程类\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"创建步骤\\n\"),n(\"ol\",[n(\"li\",[t._v(\"继承Thread类\")]),t._v(\" \"),n(\"li\",[t._v(\"重写init方法添加自己的属性，执行父类init\")]),t._v(\" \"),n(\"li\",[t._v(\"重写run方法\")])])]),t._v(\" \"),n(\"li\",[t._v(\"使用\\n\"),n(\"ol\",[n(\"li\",[t._v(\"实例化对象\")]),t._v(\" \"),n(\"li\",[t._v(\"调用start自动执行run\")]),t._v(\" \"),n(\"li\",[t._v(\"join回收线程\")])])])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"线程通信\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#线程通信\"}},[t._v(\"#\")]),t._v(\" 线程通信\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"通信方法\")]),n(\"br\"),t._v(\"\\n线程间使用全局变量进行通信\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"共享资源的争夺\")]),n(\"br\"),t._v(\"\\n共享资源：多个进程和线程都可以操作的资源称为共享资源\"),n(\"br\"),t._v(\"\\n影响：对共享资源的无需操作可能会带来数据的混乱或操作错误，此时需要同步互斥机制处理\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"同步互斥机制\")]),n(\"br\"),t._v(\"\\n同步：同步是一种协作关系，为完成操作，多进程或线程间形成一种协调，按照必要的步骤操作\"),n(\"br\"),t._v(\"\\n互斥：互斥是一种制约关系，当一个进程或者线程抢占到资源时进行加锁处理，其他进程线程需等解锁后才能护理\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"线程互斥方法\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language-python line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[n(\"code\",[t._v(\"线程Event \\n    e \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Event\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  创建Event对象\\n    e\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"wait\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"timeout\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  阻塞等待直至线程被\"),n(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"set\")]),t._v(\"\\n    e\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token builtin\"}},[t._v(\"set\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  设置e，使wait结束阻塞\\n    e\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"clear\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  清除e的设置，wait会阻塞\\n    e\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"is_set\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"  判断e的状态\\n同步互斥方法Lock\\n    lock \"),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Lock\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"    创建锁\\n    lock\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"acquire\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"   上锁  如果lock已经上锁会阻塞\\n    lock\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"release\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"   解锁 \\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"with\")]),t._v(\"  lock\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\"   上锁\\n        \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"\\n    \"),n(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"with\")]),t._v(\" 代码块结束自动解锁\\n\")])]),t._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[t._v(\"13\")]),n(\"br\")])]),n(\"h3\",{attrs:{id:\"python线程的gil问题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#python线程的gil问题\"}},[t._v(\"#\")]),t._v(\" python线程的GIL问题\")]),t._v(\" \"),n(\"p\",[t._v(\"效率：在无阻塞的情况下，多线程运行效率与单线程几乎相近，而多进程可有效的提高程序运行效率\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"python的GIL问题\")])]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"GIL：由于python解释器设计中加入了全局解释器锁，导致python解释器只能解释一个线程，降低了python执行效率\")]),t._v(\" \"),n(\"li\",[t._v(\"后果：因遇到阻塞解释器会主动让出解释器，所以python在高延迟、多阻塞的情况下可提高运行效率，其它情况不适合\")]),t._v(\" \"),n(\"li\",[t._v(\"问题建议：\\n\"),n(\"ol\",[n(\"li\",[t._v(\"修改c解释器\")]),t._v(\" \"),n(\"li\",[t._v(\"尽量使用进程并发\")]),t._v(\" \"),n(\"li\",[t._v(\"不用c作为解释器\")])])])]),t._v(\" \"),n(\"h3\",{attrs:{id:\"进程和线程的区别联系\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#进程和线程的区别联系\"}},[t._v(\"#\")]),t._v(\" 进程和线程的区别联系\")]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"区别联系\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"两者都是多任务编程方式，都能使用计算机多核资源\")]),t._v(\" \"),n(\"li\",[t._v(\"进程创建和删除消耗的资源比线程多\")]),t._v(\" \"),n(\"li\",[t._v(\"进程空间独立，数据互不干扰，有专门的通信方法，线程使用全局变量通信\")]),t._v(\" \"),n(\"li\",[t._v(\"一个进程可包含多个线程，二者存在包含关系\")]),t._v(\" \"),n(\"li\",[t._v(\"多线程共享进程资源，对共享资源操作时往往需要同步互斥处理\")]),t._v(\" \"),n(\"li\",[t._v(\"进程线程都是运行过程描述，有自己的属性标志\")])]),t._v(\" \"),n(\"p\",[n(\"strong\",[t._v(\"应用场景\")])]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"任务场景： 如果是相对独立的任务模块可能使用进程，如果是多个分支共同构成一个完整功能可能用线程\")]),t._v(\" \"),n(\"li\",[t._v(\"项目结构：多种语言实现不同任务模块可能是多进程。\")]),t._v(\" \"),n(\"li\",[t._v(\"语言特点：比如Java一些语言实现线程资源少效率高，Python有GIL 等\")]),t._v(\" \"),n(\"li\",[t._v(\"难易程度： 通信难度，逻辑处理难度等考量\")])])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}