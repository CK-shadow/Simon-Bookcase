{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{579:function(a,t,e){\"use strict\";e.r(t);var r=e(0),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h3\",{attrs:{id:\"使用spring-security-oauth2和jwt保护微服务系统\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用spring-security-oauth2和jwt保护微服务系统\"}},[a._v(\"#\")]),a._v(\" 使用Spring Security OAuth2和JWT保护微服务系统\")]),a._v(\" \"),e(\"p\",[a._v(\"如果只用Spring Security OAuth2来保护Spring Cloud微服务系统的话，那么每次请求都需要经过Uaa服务去验证当前Token的合法性，并且需要查询该Token对应的用户的权限。在高并发场景下，会存在性能瓶颈，改善的方法是将Uaa服务集群部署并加上缓存。可以采用Spring Security OAuth2和JWT的方式，Uaa服务只验证一次，返回JWT。返回的JWT中包含了用户的所有信息，包括权限信息\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"什么是jwt\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是jwt\"}},[a._v(\"#\")]),a._v(\" 什么是JWT\")]),a._v(\" \"),e(\"p\",[a._v(\"JSON Web Token（JWT）是一种开放的标准，JWT定义了一种紧凑且自包含的标准，该标准旨在将各个主体的信息包装为JSON对象。主体信息是通过数字签名进行加密和验证的。常使用HMAC算法或RSA算法对JWT进行签名，安全性很高，下面进一步解释它的特点：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"紧凑型：由于是加密后的字符串，JWT看起来数据体积非常小，可通过POST请求参数或HTTP请求头发送，另外，数据体积小意味着传输速度快\")]),a._v(\" \"),e(\"li\",[a._v(\"自包含：JWT包含了主体的所有信息，所以避免了每个请求都需要向Uaa服务验证身份，降低了服务器的负载\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"jwt的结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jwt的结构\"}},[a._v(\"#\")]),a._v(\" JWT的结构\")]),a._v(\" \"),e(\"p\",[a._v('JWT由3个部分组成，分别以\".\"号分隔，组成部分如下：')]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"Header（头）\\n\"),e(\"ul\",[e(\"li\",[a._v(\"Header通常由两部分组成：令牌的类型和使用的算法类型，将Header用Base64编码作为JWT的第一部分\")])])]),a._v(\" \"),e(\"li\",[a._v(\"Payload（有效载荷）\\n\"),e(\"ul\",[e(\"li\",[a._v(\"Payload包含了用户的一些基本信息和Claim（声明、权利），有3种类型的Claim：保留、公开和私人，将Payload用Base64编码作为JWT的第一部分\")])])]),a._v(\" \"),e(\"li\",[a._v(\"Signature（签名）\\n\"),e(\"ul\",[e(\"li\",[a._v(\"要创建签名部分，须将Base64编码后的Header、Payload和密钥进行签名\")])])])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"jwt的应用场景\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jwt的应用场景\"}},[a._v(\"#\")]),a._v(\" JWT的应用场景\")]),a._v(\" \"),e(\"p\",[a._v(\"JWT的使用场景如下：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[a._v(\"认证：这时JWT最常见的使用场景，一旦用户登录成功获取JWT之后，后续的每个请求都将携带该JWT。该JWT包含了用户信息、权限点等信息，根据JWT包含的信息，资源服务可以控制该JWT可以访问的资源范围。因为JWT的开销很小，并且能够在不同的域中使用，单点登录是一个广泛使用JWT的场景\")]),a._v(\" \"),e(\"li\",[a._v(\"信息交换：JWT是在各方之间安全传输信息的一种方式，JWT使用签名加密，安全性很高。另外，当使用Header和Payload签名时，还可以验证内容是否被篡改\")])]),a._v(\" \"),e(\"h3\",{attrs:{id:\"如何使用jwt\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何使用jwt\"}},[a._v(\"#\")]),a._v(\" 如何使用JWT\")]),a._v(\" \"),e(\"p\",[a._v(\"客户端通过提供用户名、密码向服务器请求获取JWT，服务器判断用户名和密码正确无误之后，将用户信息和权限点经过加密以JWT形式返回给客户端。在以后的每次请求中，获取到该JWT的客户端都需要携带该JWT，这样做的好处就是以后的请求都不需要通过Uaa服务来判断该请求的用户以及该用户的权限。在微服务系统中，可以使用JWT来做单点登录\")]),a._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://www.cnblogs.com/yueshutong/p/10279346.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"推荐博文\"),e(\"OutboundLink\")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}