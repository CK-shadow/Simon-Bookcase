{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{365:function(t,r,s){\"use strict\";s.r(r);var _=s(0),a=Object(_.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h3\",{attrs:{id:\"类变量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类变量\"}},[t._v(\"#\")]),t._v(\" 类变量\")]),t._v(\" \"),s(\"p\",[t._v(\"类变量是类的属性，此属性属于类，不属于此类的实例\"),s(\"br\"),t._v(\"\\n作用：\"),s(\"br\"),t._v(\"\\n 通常用来存储该类创建的对象的共有属性\"),s(\"br\"),t._v(\"\\n说明：\"),s(\"br\"),t._v(\"\\n 类变量可以通过该类直接访问\"),s(\"br\"),t._v(\"\\n 类变量可以通过此类的实例直接访问\"),s(\"br\"),t._v(\"\\n 类变量可以通过此类的对象的_class_属性间接访问\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"类的-slots-列表\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类的-slots-列表\"}},[t._v(\"#\")]),t._v(\" 类的_slots_列表\")]),t._v(\" \"),s(\"p\",[t._v(\"作用：\"),s(\"br\"),t._v(\"\\n 限定一个类创建的实例只能有固定的属性（实例变量）\"),s(\"br\"),t._v(\"\\n 不允许对象添加列表以外的属性（实例变量）\"),s(\"br\"),t._v(\"\\n 防止用户因错写属性名称而发生程序错误\"),s(\"br\"),t._v(\"\\n说明：\"),s(\"br\"),t._v(\"\\n 1._slots_列表绑定一个字符串列表\"),s(\"br\"),t._v(\"\\n 2.含有_slots_列表的类所创建的实例对象没有_dict_属性，即此实例不用字典来存储对象的属性（实例变量）\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"类方法-classmethod\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类方法-classmethod\"}},[t._v(\"#\")]),t._v(\" 类方法@classmethod\")]),t._v(\" \"),s(\"p\",[t._v(\"类方法是用于描述类行为的方法，类方法属于类，不属于类的实例\"),s(\"br\"),t._v(\"\\n说明：\"),s(\"br\"),t._v(\"\\n 类方法需要使用@classmethod装饰器定义\"),s(\"br\"),t._v('\\n 类方法至少有一个形参，第一个形参用于绑定类，约定写成\"cls\"，类和该类的实例都可以调用该方法'),s(\"br\"),t._v(\"\\n 类方法不能访问此类创建的实例的属性\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"静态方法-staticmethod\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#静态方法-staticmethod\"}},[t._v(\"#\")]),t._v(\" 静态方法@staticmethod\")]),t._v(\" \"),s(\"p\",[t._v(\"静态方法是定义在类内部的函数，此函数的作用域是类的内部\"),s(\"br\"),t._v(\"\\n说明：\"),s(\"br\"),t._v(\"\\n 静态方法需要使用@staticmethod装饰器来定义\"),s(\"br\"),t._v(\"\\n 静态方法与普通函数定义相同，不需要传入self实例参数和cls参数\"),s(\"br\"),t._v(\"\\n 静态方法只能凭借该类和类创建的实例调用\"),s(\"br\"),t._v(\"\\n 静态方法不能访问类变量或实例变量\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"继承inheritance-派生derived\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#继承inheritance-派生derived\"}},[t._v(\"#\")]),t._v(\" 继承inheritance/派生derived\")]),t._v(\" \"),s(\"p\",[t._v(\"继承是指从已有的类中派生出新的类，新类具有原类的行为，并能扩展新的行为\"),s(\"br\"),t._v(\"\\n派生类就是从一个已有类中衍生出新类，在新类上可以添加新的属性或行为\"),s(\"br\"),t._v(\"\\n作用：\"),s(\"br\"),t._v(\"\\n 1.用继承派生机制，可以将一些共有功能加在基类中，实现代码的共享\"),s(\"br\"),t._v(\"\\n 2.在不改变基类的代码的基础上改变原有的功能\")])])}),[],!1,null,null,null);r.default=a.exports}}]);","extractedComments":[]}