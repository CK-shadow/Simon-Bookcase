{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{638:function(t,v,_){\"use strict\";_.r(v);var o=_(0),r=Object(o.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[_(\"ol\",[_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 好的单元测试必须遵守AIR原则\\n\"),_(\"ul\",[_(\"li\",[t._v(\"A：Automatic（自动化）\")]),t._v(\" \"),_(\"li\",[t._v(\"I ：Independent（独立性）\")]),t._v(\" \"),_(\"li\",[t._v(\"R：Repeatable（可重复）\")])])],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 单元测试应该是全自动执行的，并且非交互式的\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 保持单元测试的独立性\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 单元测试是可以重复执行的，不能收到外界环境的影响\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 对于单元测试，要保证测试粒度足够小，有助于精确定位，单测粒度至多是类级别，一般是方法级别\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 核心业务、核心应用、核心模块的增量代码确保单元测试通过\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"red\"}},[t._v(\"[强制]\")]),t._v(\" 单元测试代码必须卸载src/java/test下，不允许写在业务代码目录下\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 单元测试的基本目标：语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都 要达到 100%\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量\\n\"),_(\"ul\",[_(\"li\",[t._v(\"B：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等\")]),t._v(\" \"),_(\"li\",[t._v(\"C：Correct，正确的输入，并得到预期的结果\")]),t._v(\" \"),_(\"li\",[t._v(\"D：Design，与设计文档相结合，来编写单元测试\")]),t._v(\" \"),_(\"li\",[t._v(\"E：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得 到预期的结果\")])])],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的， 或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者 对单元测试产生的数据有明确的前后缀标识\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 对于不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而 书写不规范测试代码\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好 覆盖所有测试用例\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"orange\"}},[t._v(\"[推荐]\")]),t._v(\" 单元测试作为一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项 目提测前完成单元测试\")],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"green\"}},[t._v(\"[参考]\")]),t._v(\" 为了更方便地进行单元测试，业务代码应避免以下情况：\\n\"),_(\"ul\",[_(\"li\",[t._v(\"构造方法中做的事情过多\")]),t._v(\" \"),_(\"li\",[t._v(\"存在过多的全局变量和静态方法\")]),t._v(\" \"),_(\"li\",[t._v(\"存在过多的外部依赖\")]),t._v(\" \"),_(\"li\",[t._v(\"存在过多的条件语句\")])])],1),t._v(\" \"),_(\"li\",[_(\"font\",{attrs:{color:\"green\"}},[t._v(\"[参考]\")]),t._v(\" 不要对单元测试存在如下误解：\\n\"),_(\"ul\",[_(\"li\",[t._v(\"那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的\")]),t._v(\" \"),_(\"li\",[t._v(\"单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的\")]),t._v(\" \"),_(\"li\",[t._v(\"单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态\")]),t._v(\" \"),_(\"li\",[t._v(\"单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障\")])])],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);","extractedComments":[]}