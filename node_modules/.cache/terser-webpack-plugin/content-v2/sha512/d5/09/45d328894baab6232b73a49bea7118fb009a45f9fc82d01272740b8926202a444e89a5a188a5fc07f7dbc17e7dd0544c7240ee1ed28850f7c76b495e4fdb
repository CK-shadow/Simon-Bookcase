{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{596:function(t,s,r){\"use strict\";r.r(s);var n=r(0),a=Object(n.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h3\",{attrs:{id:\"列表的切片\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#列表的切片\"}},[t._v(\"#\")]),t._v(\" 列表的切片\")]),t._v(\" \"),r(\"p\",[t._v(\"列表 [:]\"),r(\"br\"),t._v(\"\\n列表 [::]\"),r(\"br\"),t._v(\"\\n列表的切片取值返回一个列表，规则等同于字符串的切片规则\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"列表的切片赋值：\")]),r(\"br\"),t._v(\"\\n作用：可以改变原列表的排列，可以插入和修改数据，可以用切片改变列表对应的元素的值\"),r(\"br\"),t._v(\"\\n语法：列表[切片slice] = 可迭代对象\"),r(\"br\"),t._v(\"\\n说明：赋值运算符的右侧必须是一个可迭代对象\"),r(\"br\"),t._v(\"\\n切片赋值注意事项:\"),r(\"br\"),t._v(\"\\n    对于步长不等于1的切片赋值，赋值运算符的右侧的可迭代对象的个数一定要等于切片切出的片数\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"del语句用于删除列表的元素\")]),r(\"br\"),t._v(\"\\n语法：del 列表[索引]\"),r(\"br\"),t._v(\"\\n    del 列表[切片]\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"python3中常用的序列相关的函数\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#python3中常用的序列相关的函数\"}},[t._v(\"#\")]),t._v(\" Python3中常用的序列相关的函数\")]),t._v(\" \"),r(\"p\",[t._v(\"序列有5种：str、list、tuple、bytes、bytearray\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"len(x)  返回序列的长度\")]),t._v(\" \"),r(\"li\",[t._v(\"max(x)  返回序列中的最大值元素\")]),t._v(\" \"),r(\"li\",[t._v(\"min(x)  返回序列中的最小值元素\")]),t._v(\" \"),r(\"li\",[t._v(\"sum(x)  返回序列中所有元素的和（元素必须是数值类型）\")]),t._v(\" \"),r(\"li\",[t._v(\"any(x)  真值测试，如果列表中其中一个值为真值则返回True\")]),t._v(\" \"),r(\"li\",[t._v(\"all(x)  真值测试，如果列表中所有值均为真值则返回True\")])]),t._v(\" \"),r(\"h3\",{attrs:{id:\"python3list常用方法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#python3list常用方法\"}},[t._v(\"#\")]),t._v(\" Python3list常用方法\")]),t._v(\" \"),r(\"p\",[t._v(\"list()  在list末尾增加一个元素\"),r(\"br\"),t._v(\"\\ninsert(index, obj)  在指定位置添加元素，如果指定下标不存在，那么就是在末尾添加\"),r(\"br\"),t._v(\"\\nextend(list)  合并两个list\"),r(\"br\"),t._v(\"\\ncount(obj)  查看某个元素在这个列表中的个数，如果该元素不存在，那么返回0\"),r(\"br\"),t._v(\"\\nindex(obj)  找到这个元素的下标，如果有多个，返回第一个，如果找一个不存在的元素会报错\"),r(\"br\"),t._v(\"\\npop()  删除最后一个元素\"),r(\"br\"),t._v(\"\\npop(index)  指定下标，删除指定的元素，如果删除一个不存在的元素会报错\"),r(\"br\"),t._v(\"\\nremove(obj)  删除list里面的一个元素，有多个相同的元素，删除第一个\")]),t._v(\" \"),r(\"div\",{staticClass:\"custom-block tip\"},[r(\"p\",[t._v(\"注：pop有返回值，remove没有返回值\")])]),t._v(\" \"),r(\"p\",[t._v(\"reserve()  将列表反转\\nsort()  排序，默认升序\\nsort(reserve=True)  降序排列\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"字符串的文本解析方法\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#字符串的文本解析方法\"}},[t._v(\"#\")]),t._v(\" 字符串的文本解析方法\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"S代表字符串\")]),r(\"br\"),t._v(\"\\nS.split(sep = None)\"),r(\"br\"),t._v(\"\\n    将字符串使用sep座位分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符分割\"),r(\"br\"),t._v(\"\\nS.join(iterable)\"),r(\"br\"),t._v(\"\\n    用可迭代对象中的字符串，返回一个一个中间用S进行分割的字符串\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"浅拷贝和深拷贝\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浅拷贝和深拷贝\"}},[t._v(\"#\")]),t._v(\" 浅拷贝和深拷贝\")]),t._v(\" \"),r(\"p\",[t._v(\"浅拷贝 shallow copy\"),r(\"br\"),t._v(\"\\n    浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程\"),r(\"br\"),t._v(\"\\n深拷贝 deep copy\"),r(\"br\"),t._v(\"\\n    需导入copy模块\"),r(\"br\"),t._v(\"\\n    深拷贝通常只对可变对象进行复制，不可变对象通常不会复制\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"列表推导式\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#列表推导式\"}},[t._v(\"#\")]),t._v(\" 列表推导式\")]),t._v(\" \"),r(\"p\",[t._v(\"列表推导式是用可迭代对象生成列表的表达式\"),r(\"br\"),t._v(\"\\n作用：用简易方法生成列表\")]),t._v(\" \"),r(\"div\",{staticClass:\"language-python line-numbers-mode\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-python\"}},[r(\"code\",[t._v(\"语法：\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"表达式 \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" 变量 \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" 可迭代对象\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"  \\n或：\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"表达式 \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"for\")]),t._v(\" 变量 \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"in\")]),t._v(\" 可迭代对象 \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" 真值表达式\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),t._v(\"\\n\")])]),t._v(\" \"),r(\"div\",{staticClass:\"line-numbers-wrapper\"},[r(\"span\",{staticClass:\"line-number\"},[t._v(\"1\")]),r(\"br\"),r(\"span\",{staticClass:\"line-number\"},[t._v(\"2\")]),r(\"br\")])]),r(\"p\",[t._v(\"说明：for in表达式的if子句可以省略，省略后将对所有的生成对象就行求之处理\")])])}),[],!1,null,null,null);s.default=a.exports}}]);","extractedComments":[]}