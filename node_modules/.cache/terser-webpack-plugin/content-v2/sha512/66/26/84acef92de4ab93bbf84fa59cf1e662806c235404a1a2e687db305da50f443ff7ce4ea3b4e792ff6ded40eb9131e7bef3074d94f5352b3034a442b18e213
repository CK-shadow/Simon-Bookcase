{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{692:function(r,i,t){\"use strict\";t.r(i);var e=t(0),v=Object(e.a)({},(function(){var r=this,i=r.$createElement,t=r._self._c||i;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":r.$parent.slotKey}},[t(\"h3\",{attrs:{id:\"什么是spring-security\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是spring-security\"}},[r._v(\"#\")]),r._v(\" 什么是Spring Security\")]),r._v(\" \"),t(\"p\",[r._v('Spring Security是Spring Resource社区的一个安全组件，Spring Security为JavaEE企业级开发提供了全面的安全防护。安全防护是一个不断变化的目标，Spring Security通过版本的不断迭代来实现这一目标。Spring Security采用\"安全层\"的概念，使每一层都尽可能安全，连续的安全层可以达到全面的防护。Spring Security可以在Controller层、Service层、DAO层等以家加注解的方式来保护应用程序的安全。Spring Security提供了细粒度的权限控制，可以精细到每一个API接口、每一个业务的方法或者每一个操作数据库的DAO方法。Spring Security提供的是应用程序层的安全解决方法，一个系统的安全还需要考虑传输层和系统层的安全，例如采用Https协议、服务器部署防火墙等')]),r._v(\" \"),t(\"h3\",{attrs:{id:\"spring-security提供的安全模块\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-security提供的安全模块\"}},[r._v(\"#\")]),r._v(\" Spring Security提供的安全模块\")]),r._v(\" \"),t(\"p\",[r._v(\"在安全验证方面，Spring Security提供了很多的安全验证模块，大部分的安全验证模块来自第三方的的权威机构或者一些相关的标准制定组织，Spring Security自身也提供了一些安全验证模型。Spring Security目前支持对以下技术的整合：\")]),r._v(\" \"),t(\"ul\",[t(\"li\",[r._v(\"HTTP BASIC 头认证（一个基于IETF RFC的标准）\")]),r._v(\" \"),t(\"li\",[r._v(\"HTTP Digest 头认证（一个基于 IETF RFC 的标准）\")]),r._v(\" \"),t(\"li\",[r._v(\"HTTPX.509 客户端证书交换认证（一个基于 IETF RFC 的标准）\")]),r._v(\" \"),t(\"li\",[r._v(\"LDAP （一种通用的跨平台身份验证，特别是在大型软件架构中）\")]),r._v(\" \"),t(\"li\",[r._v(\"基于表单的验证\")]),r._v(\" \"),t(\"li\",[r._v(\"OpenID 验证\")]),r._v(\" \"),t(\"li\",[r._v(\"基于预先建立的请求头的验证\")]),r._v(\" \"),t(\"li\",[r._v(\"Jasig Central Authentication Service， 也被称作 CAS， 是一个流行的开源单点登录系统\")]),r._v(\" \"),t(\"li\",[r._v(\"远程方法调用（RMI）和 HttpInvoker ( Spring 远程协议）的认证\")]),r._v(\" \"),t(\"li\",[r._v(\"自动“记住我”的身份验证\")]),r._v(\" \"),t(\"li\",[r._v(\"匿名验证（允许每一次未经身份验证的调用）\")]),r._v(\" \"),t(\"li\",[r._v(\"Run-as 身份验证（每一次调用都需要提供身份标识）\")]),r._v(\" \"),t(\"li\",[r._v(\"Java 认证和授权服务\")]),r._v(\" \"),t(\"li\",[r._v(\"Java EE 容器认证\")]),r._v(\" \"),t(\"li\",[r._v(\"Kerberos\")]),r._v(\" \"),t(\"li\",[r._v(\"Java 开源的单点登录＊\")]),r._v(\" \"),t(\"li\",[r._v(\"OpenNMS 网络管理平台＊\")]),r._v(\" \"),t(\"li\",[r._v(\"AppFuse ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"AndroMDA ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"MuleESB ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Direct Web Request (DWR）＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Grails ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Tapestry ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"JTrac ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Jasypt ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Roller ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Elastic Path ＊\")]),r._v(\" \"),t(\"li\",[r._v(\"Atlassian Crowd＊\")]),r._v(\" \"),t(\"li\",[r._v(\"自己创建的认证系统\\n带＊的是来自第三方的验证模块\")])]),r._v(\" \"),t(\"h3\",{attrs:{id:\"spring-boot-security和spring-security的关系\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-boot-security和spring-security的关系\"}},[r._v(\"#\")]),r._v(\" Spring Boot Security和Spring Security的关系\")]),r._v(\" \"),t(\"p\",[r._v(\"spring-boot-starter-security的pom文件包含了Spring Security的两个Jar包，并移除了这两个Jar包的apo功能，引入了aop的依赖，另外包含了spring-boot-starter的依赖。由此可见，spring-boot-starter-security是对Spring Security的一个封装\")]),r._v(\" \"),t(\"h3\",{attrs:{id:\"spring-security方法级别上的保护\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring-security方法级别上的保护\"}},[r._v(\"#\")]),r._v(\" Spring Security方法级别上的保护\")]),r._v(\" \"),t(\"p\",[r._v(\"在Security配置类上添加注解@EnableGlobalMethodSecurity注解可开启方法级别的保护，括号后面的参数可选，可选参数如下：\")]),r._v(\" \"),t(\"ul\",[t(\"li\",[r._v(\"prePostEnabled：Spring Security的Pre和Post注解是否可用，即@PreAuthorize和@PostAuthorize是否可用\")]),r._v(\" \"),t(\"li\",[r._v(\"secureEnabled：Spring Security的@Secured注解是否可用\")]),r._v(\" \"),t(\"li\",[r._v(\"jsr250Enabled：Spring Security对JSR-250的注解是否可用\\n一般来说，只会用到prePostEnabled，因为@PreAuthorize和@PostAuthorize注解更适合方法级别的控制，并且支持Spring EL表达式，适合Spring开发者。其中，@PreAuthorize注解会在方法执行前进行权限验证，@PostAuthorize注解会在方法执行后再进行权限验证，后一个注解的应用场景很少\")])])])}),[],!1,null,null,null);i.default=v.exports}}]);","extractedComments":[]}